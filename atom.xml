<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Playing By Programming]]></title>
  <link href="http://cjbrock.github.com/atom.xml" rel="self"/>
  <link href="http://cjbrock.github.com/"/>
  <updated>2012-10-15T10:41:18-04:00</updated>
  <id>http://cjbrock.github.com/</id>
  <author>
    <name><![CDATA[Corinna Brock]]></name>
    <email><![CDATA[corinna.brock@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[4 Coders Every Ruby Newbie Should Know]]></title>
    <link href="http://cjbrock.github.com/blog/2012/10/12/4-coders-every-ruby-newbie-should-know/"/>
    <updated>2012-10-12T14:00:00-04:00</updated>
    <id>http://cjbrock.github.com/blog/2012/10/12/4-coders-every-ruby-newbie-should-know</id>
    <content type="html"><![CDATA[<h2>Yukihiro &#8220;Matz&#8221; Matsumoto</h2>

<p><img class="right" src="http://cjbrock.github.com/images/coders/matzpic.jpg" title="Matz" alt="Yukihiro "></p>

<blockquote><p>I hope to see Ruby help every programmer in the world to be productive, and to enjoy programming, and to be happy. That is the primary purpose of Ruby language.</p></blockquote>


<p><a href="http://www.rubyist.net/~matz/">Matz</a> is a Japanese computer programmer and the creator of Ruby.  He released Ruby in December of 1995 as a productive language that was still fun to use, empahsizing the feeling of the language rather than striving for language perfection. Ruby is said to follow the principle of least astonishment, meaning that the language should behave in such a way as to minimize confusion for experienced users (at least if the user is Matz). Now working as the chief architect of <a href="http://www.heroku.com/">Heroku</a>, he is currently developing a new open-source lightweight Ruby project called <a href="https://github.com/mruby/mruby">mruby</a>.</p>

<p>The Ruby community lives by the mantra: &#8220;Matz is nice, so we are nice&#8221;.</p>

<h2>_why the lucky stiff</h2>

<p><img class="right" src="http://cjbrock.github.com/images/coders/why.jpg" title="_Why" alt="_why the lucky stiff"></p>

<blockquote><p>When you don&#8217;t create things, you become defined by your tastes rather than ability. Your tastes only narrow & exclude people. So create.</p></blockquote>


<p>Although he committed <a href="http://www.urbandictionary.com/define.php?term=infocide">infocide</a> on August 19, 2009, _why is still one of the most influential Ruby programmers to date.  He is best known for <a href="http://mislav.uniqpath.com/poignant-guide/book/chapter-1.html">Why&#8217;s Poignant Guide to Ruby</a>, <a href="http://hackety.com/">Hackety Hack</a>, and the <a href="http://tryruby.org/">Try Ruby</a> interactive programming tutorial. He has also contributed several libraries and applications to the coder community. His love of programming and language speak to even new programmers, as illustrated by Annie Lowrey&#8217;s March 2012 Slate Magazine article <a href="http://www.slate.com/articles/technology/technology/2012/03/ruby_ruby_on_rails_and__why_the_disappearance_of_one_of_the_world_s_most_beloved_computer_programmers_.html">&#8220;Where&#8217;s _why?&#8221;</a>.</p>

<h2>David Heinemeier Hansson</h2>

<p><img class="right" src="http://cjbrock.github.com/images/coders/hansson.jpg" title="Hansson" alt="David Heinemeier Hansson"></p>

<blockquote><p>Flexibility is not free. It’s overrated. And if you trade that flexibility in for some constraints, you get a lot of complexity removed from the equation, you get a lot of productivity back from all the stuff you don’t have to do.</p></blockquote>


<p><a href="https://twitter.com/dhh">Hansson</a> is a Danish programmer who created <a href="http://rubyonrails.org/">Ruby on Rails</a>, a web framework that is optimized for programmer productivity.  It abstracts away a lot of code processes, leading some to criticize the <a href="http://www.michaelharrison.ws/weblog/?p=159">&#8220;magic&#8221; of rails</a>. However, Rails allows programmers a high level of productivity faster with a less painful learning curve than other languages. Hansson is also a <a href="http://david.heinemeierhansson.com/racing">professional race car driver</a>.</p>

<h2>Avi Flombaum</h2>

<p><img class="right" src="http://cjbrock.github.com/images/coders/avi.jpeg" title="Avi" alt="Avi Flombaum"></p>

<blockquote><p>There’s a joy to programming. That’s the reason why we’re here…to experience the act of falling in love with programming.</p></blockquote>


<p><a href="https://de.twitter.com/aviflombaum">Avi</a> is our fearless leader at the <a href="http://flatironschool.com">Flatiron School</a> in New York City. A programmer since the internet was born, Avi brings a love of code and a passion for teaching to the school. <a href="http://shitavisays.tumblr.com">Imminently quotable</a>, Avi also organizes one of the largest Rails meetups in the world, <a href="http://www.meetup.com/nyc-on-rails">NYC on Rails</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 Easy Steps to Getting Started with Ruby Koans]]></title>
    <link href="http://cjbrock.github.com/blog/2012/10/10/5-easy-steps-to-getting-started-with-ruby-koans/"/>
    <updated>2012-10-10T15:02:00-04:00</updated>
    <id>http://cjbrock.github.com/blog/2012/10/10/5-easy-steps-to-getting-started-with-ruby-koans</id>
    <content type="html"><![CDATA[<p><a href="http://rubykoans.com/">Ruby Koans</a> are a great learning tool published by Jim Weirich and Joe O&#8217;Brien.  They will expose you to both Ruby basics and testing conventions, but getting started can be a little intimidating. I&#8217;ve found these five tips to be really helpful.</p>

<h2>1. Download, don&#8217;t web-base.</h2>

<p>Although the web page does offer you the option to run through the Koans online, it&#8217;s an abridged version and only offers 30 modules. It also doesn&#8217;t save your state, so if you can&#8217;t complete all 30 in one sitting you have to restart.</p>

<h2>2. Read the Installing Ruby section (no, really).</h2>

<p>Even if you already have Ruby installed, walk through the Installing Ruby section of the webpage. it shows you how to get started with the Koans. To start the Koans, simply go to Terminal (or your choice of command line interface) and while in your Koans folder, type:
<img class="center" src="http://cjbrock.github.com/images/koans/path_to_enlightenment.png" title="Path to Enlightenment" alt="Path to Enlightenment">
The error message will point you directly to the file and line number. This will bring up your first test. You don&#8217;t really need to know about testing to be able to get through the Koans, you just need to understand that whenever you see a line like this: ___ you need to delete it and fill it in with something else.</p>

<h2>3. Guess.</h2>

<p>If you know about the Koans, chances are that you have a basic Ruby knowledge base. Our first assert tells us exactly what to do, which makes guessing is pretty easy.
<img class="center" src="http://cjbrock.github.com/images/koans/first_assert.png" title="First Assert" alt="First Assert">
Once the assert is correct, go back to terminal and run ruby path_to_enlightement.rb again, and your test should pass.
<img class="center" src="http://cjbrock.github.com/images/koans/first_test_passed.png" title="First Test Passed" alt="First Test Passed"></p>

<h2>4. When in doubt, test in IRB.</h2>

<p>You can also test the code in IRB.  This will (almost) always give you the correct answer.
<img class="center" src="http://cjbrock.github.com/images/koans/about_nil.png" title="About Nil" alt="About Nil">
If you don&#8217;t know if nil is an object, run it in IRB.
<img class="center" src="http://cjbrock.github.com/images/koans/nil_object.png" title="Is Nil an Object" alt="Is Nil an Object"></p>

<h2>5. Google.</h2>

<p>If you&#8217;re really and truly stuck and can&#8217;t figure out the error message (usually about 15 minutes is a good rule of thumb when you&#8217;re having trouble) try Googling Ruby Koans and Github.  Many, many, many people have completed and committed the Koans, and a lot of them have committed them. When in doubt, check out their code and try to write your own based off their solutions. Be sure to check out a couple different solutions - all solutions are definitely not created equal.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://cjbrock.github.com/blog/2012/10/03/hello-world/"/>
    <updated>2012-10-03T15:29:00-04:00</updated>
    <id>http://cjbrock.github.com/blog/2012/10/03/hello-world</id>
    <content type="html"><![CDATA[<p>Flatiron school blog here I come!</p>
]]></content>
  </entry>
  
</feed>
