<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Playing By Programming]]></title>
  <link href="http://cjbrock.github.com/atom.xml" rel="self"/>
  <link href="http://cjbrock.github.com/"/>
  <updated>2012-12-27T10:27:42-05:00</updated>
  <id>http://cjbrock.github.com/</id>
  <author>
    <name><![CDATA[Corinna Brock]]></name>
    <email><![CDATA[corinna.brock@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Solve a 403 Nginx File Download Permission Error]]></title>
    <link href="http://cjbrock.github.com/blog/2012/11/28/how-to-solve-a-403-nginx-file-download-permission-error/"/>
    <updated>2012-11-28T18:20:00-05:00</updated>
    <id>http://cjbrock.github.com/blog/2012/11/28/how-to-solve-a-403-nginx-file-download-permission-error</id>
    <content type="html"><![CDATA[<p>Once the basic functionality of our <a href="http://assignment.io">assignment.io</a> website was implemented, one of the features that we wanted to implement was file upload and download.  The basic upload functionality was surprisingly easy to implement using a gem called <a href="https://github.com/jnicklas/carrierwave">CarrierWave</a>.  The Github page has a pretty thorough walk-through, but if you’re looking to display the content on your website there is a <a href="http://railscasts.com/episodes/253-carrierwave-file-uploads">Railscast</a> on the file upload process.  Both will walk you through the steps of setting it up, and it took us about 20 minutes.</p>

<p>File download was a bit more complex.  While an individual user would only upload one file to be associated with an assignment, the person who assigned the assignment would probably want a way to download all of the submitted work at once.  For this, we implemented a gem called <a href="https://github.com/aussiegeek/rubyzip">RubyZip</a>. If you’re writing a rails app, you don’t need to require ‘rubygems’, but you DO need to require ‘zip/zip’ in your application.rb file.</p>

<p>The RubyZip documentation(http://rubyzip.sourceforge.net/) is pretty dense, but thorough.  With a few modifications, we passed it an array of files, specified the file names, and created a file tree structure so that when the user downloaded the files,  they were organized by submitter and named appropriately.</p>

<figure class='code'><figcaption><span>[Submission Model Code] [] </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">zip_files</span><span class="p">(</span><span class="n">submissions</span><span class="p">)</span>
</span><span class='line'>    <span class="n">zipfile_name</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">public_path</span><span class="si">}</span><span class="s2">/download/assignments/assignment_</span><span class="si">#{</span><span class="n">submissions</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">user_assignment</span><span class="o">.</span><span class="n">assignment</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">.zip&quot;</span>
</span><span class='line'>    <span class="no">File</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">zipfile_name</span><span class="p">)</span> <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="n">zipfile_name</span><span class="p">)</span>
</span><span class='line'>    <span class="n">zip_file</span> <span class="o">=</span> <span class="no">Zip</span><span class="o">::</span><span class="no">ZipFile</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">zipfile_name</span><span class="p">,</span> <span class="no">Zip</span><span class="o">::</span><span class="no">ZipFile</span><span class="o">::</span><span class="no">CREATE</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">zipfile</span><span class="o">|</span>
</span><span class='line'>      <span class="n">submissions</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">submission</span><span class="o">|</span>
</span><span class='line'>        <span class="c1"># Two arguments:</span>
</span><span class='line'>        <span class="c1"># - The name of the file as it will appear in the archive</span>
</span><span class='line'>        <span class="c1"># - The original file, including the path to find it</span>
</span><span class='line'>        <span class="n">file</span> <span class="o">=</span> <span class="n">submission</span><span class="o">.</span><span class="n">submitted_file</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">file</span><span class="o">.</span><span class="n">path</span>
</span><span class='line'>          <span class="n">filename</span> <span class="o">=</span> <span class="n">file</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/.+\/[^\/]/</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>          <span class="n">zipfile</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="s2">&quot;assignment_</span><span class="si">#{</span><span class="n">submissions</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">user_assignment</span><span class="o">.</span><span class="n">assignment</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">submission</span><span class="o">.</span><span class="n">user_assignment</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">file</span><span class="o">.</span><span class="n">path</span><span class="p">)</span> <span class="k">if</span> <span class="n">file</span><span class="o">.</span><span class="n">url</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">zipfile_name</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Everything worked on our local host, but when we deployed to our server we got an Nginx 403 permissions error. <img class="right" src="http://cjbrock.github.com/images/chmod/nginx.png" title="Nginx Error" alt="Nginx Error">
Once we SSH’ed into the server, we saw that the file was being created, but while the owner of the file was allowed to read and write the file, no one else could do anything with it.*</p>

<p><img class="left" src="http://cjbrock.github.com/images/chmod/permissions.png" title="Bad Permissions" alt="Bad Permissions"></p>

<p>Much like you can run chmod in your bash window, Ruby also contains a chmod command.  By adding one line to our code,  we modified our permissions and allowed the user to download the file appropriately.</p>

<figure class='code'><figcaption><span>[Submission Model Code with permissions] [] </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">zip_files</span><span class="p">(</span><span class="n">submissions</span><span class="p">)</span>
</span><span class='line'>    <span class="n">zipfile_name</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">public_path</span><span class="si">}</span><span class="s2">/download/assignments/assignment_</span><span class="si">#{</span><span class="n">submissions</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">user_assignment</span><span class="o">.</span><span class="n">assignment</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">.zip&quot;</span>
</span><span class='line'>    <span class="no">File</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">zipfile_name</span><span class="p">)</span> <span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="n">zipfile_name</span><span class="p">)</span>
</span><span class='line'>    <span class="n">zip_file</span> <span class="o">=</span> <span class="no">Zip</span><span class="o">::</span><span class="no">ZipFile</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">zipfile_name</span><span class="p">,</span> <span class="no">Zip</span><span class="o">::</span><span class="no">ZipFile</span><span class="o">::</span><span class="no">CREATE</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">zipfile</span><span class="o">|</span>
</span><span class='line'>      <span class="n">submissions</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">submission</span><span class="o">|</span>
</span><span class='line'>        <span class="c1"># Two arguments:</span>
</span><span class='line'>        <span class="c1"># - The name of the file as it will appear in the archive</span>
</span><span class='line'>        <span class="c1"># - The original file, including the path to find it</span>
</span><span class='line'>        <span class="n">file</span> <span class="o">=</span> <span class="n">submission</span><span class="o">.</span><span class="n">submitted_file</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">file</span><span class="o">.</span><span class="n">path</span>
</span><span class='line'>          <span class="n">filename</span> <span class="o">=</span> <span class="n">file</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/.+\/[^\/]/</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>          <span class="n">zipfile</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="s2">&quot;assignment_</span><span class="si">#{</span><span class="n">submissions</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">user_assignment</span><span class="o">.</span><span class="n">assignment</span><span class="o">.</span><span class="n">id</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">submission</span><span class="o">.</span><span class="n">user_assignment</span><span class="o">.</span><span class="n">user</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">filename</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="n">file</span><span class="o">.</span><span class="n">path</span><span class="p">)</span> <span class="k">if</span> <span class="n">file</span><span class="o">.</span><span class="n">url</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="no">File</span><span class="o">.</span><span class="n">chmod</span><span class="p">(</span><span class="mo">0775</span><span class="p">,</span> <span class="n">zipfile_name</span><span class="p">)</span>
</span><span class='line'>    <span class="n">zipfile_name</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Returning to the server, you can see that the permissions were appropriately modified, and the user can now download the Zip file of all the files for an assignment.
<img class="left" src="http://cjbrock.github.com/images/chmod/goodpermissions.png" title="Good Permissions" alt="Good Permissions">
The built-in site functionality works as well.</p>

<p><em><a href="http://www.dartmouth.edu/~rc/help/faq/permissions.html">This is a great explanation of file permissions in Unix.</a> For purposes of simplicity, I&#8217;ve abstracted away the routing and controller functionality that calls the above method.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To Create a Github Feed for Your Website]]></title>
    <link href="http://cjbrock.github.com/blog/2012/11/13/how-to-create-a-github-feed-for-your-website/"/>
    <updated>2012-11-13T14:48:00-05:00</updated>
    <id>http://cjbrock.github.com/blog/2012/11/13/how-to-create-a-github-feed-for-your-website</id>
    <content type="html"><![CDATA[<p><img class="right" src="http://cjbrock.github.com/images/GithubFeed/octocat-class-act.jpg" title="Octocat Rocks" alt="Octocat Rocks"></p>

<p>When we were designing our <a href="http://students.flatiron.com/corinnabrock">student pages</a> at the <a href="http://flatironschool.com">Flatiron School</a>, one of our major questions was what to include. As programmers, one of the best ways that we can get noticed is to have our open-source projects available in as many places as we can find them.  <a href="http://www.github.com">Github</a> allows you to show your code to the world. The Octopress sidebar has built-in functionality of a list of your current Github repos, but wouldn&#8217;t it be cooler to have public activity feed that shows which of your repos have the most current commits?</p>

<h2>1. Find your Github RSS key.</h2>

<p>Github provides an RSS key to all of your public activity.  This format of your key will be:</p>

<h5>https://github.com/USERNAME.atom</h5>

<p>Replace USERNAME with your username.  For example, my public github key would be https://github.com/cjbrock.atom. If you subscribe to your own RSS feed, the key generated will be your private RSS feed. It looks something like this: https://github.com/username.private.actor.atom?token=somehextoken. Unless you would like to expose your private key to the rest of the world, please do not use this key.</p>

<!--more-->


<h2>2. Use a javascript/php generator to create your code.</h2>

<p><img class="right" src="http://cjbrock.github.com/images/GithubFeed/Feed2JS.png" title="Feed 2 JS" alt="Feed 2 JS">
There are many javascript PHP generators that allow you to copy and paste javascript right into your site, and will abstract away the complexity of writing your own RSS generator. <a href="http://feed2js.org/">FeedtoJS</a> is the original cut and paste PHP generator.  Luckily, it&#8217;s open source, and you can run your own instance of Feed2PHP if you&#8217;d like to.  But for this, just insert your RSS key, and select your options that you would like.  You can specify the number of items to display and showing and hiding item descriptions, as well as many other options.  Feed2JS will generate code for you to copy and paste into your site.</p>

<p>A simpler version of Feed2JS is located <a href="http://itde.vccs.edu/rss2js/build.php">here</a>, but it is not guaranteed to stay live.</p>

<h2>3. Put the code in your application.</h2>

<p>Feeds are best located in a column layout.  The <a href="http://students.flatiron.com/corinnabrock">Students at Flatiron</a> page uses a dual column layout with a <a href="https://twitter.com/cjnboston">Twitter</a> feed, but you can use CSS or SCSS to format your output however you&#8217;d like.<br/>
<img class="right" src="http://cjbrock.github.com/images/GithubFeed/feed-view.png" title="Feed 2 JS" alt="Feed 2 JS"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Fix a RedCloth Error While Installing Octopress]]></title>
    <link href="http://cjbrock.github.com/blog/2012/10/24/how-to-fix-a-red-cloth-error-while-installing-octopress/"/>
    <updated>2012-10-24T15:35:00-04:00</updated>
    <id>http://cjbrock.github.com/blog/2012/10/24/how-to-fix-a-red-cloth-error-while-installing-octopress</id>
    <content type="html"><![CDATA[<p><a href="http://octopress.org/">Octopress</a> is a great blogging platform for coders. <em>(Full disclosure: This blog is run on Octopress.)</em> However, when installing, sometimes strange errors come up.  A few weeks ago while setting up our blogs, my classmate <a href="http://innatewonderer.github.com/">Jenya</a> ran into a strange RedCloth error while running bundle install following the <a href="http://octopress.org/docs/setup/">otherwise very comprehensive setup instructions</a> provided by Octopress.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">An</span> <span class="n">error</span> <span class="n">occured</span> <span class="k">while</span> <span class="n">installing</span> <span class="no">RedCloth</span> <span class="p">(</span><span class="mi">4</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">9</span><span class="p">),</span> <span class="ow">and</span> <span class="no">Bundler</span> <span class="n">cannot</span> <span class="n">continue</span><span class="o">.</span>
</span><span class='line'><span class="no">Make</span> <span class="n">sure</span> <span class="n">that</span> <span class="sb">`gem install RedCloth -v &#39;4.2.9&#39;`</span> <span class="n">succeeds</span> <span class="n">before</span> <span class="n">bundling</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>This was a little intriguing, but not hard to fix.  However, after trying to run gem install RedCloth, we got another error.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">ERROR</span><span class="p">:</span>  <span class="no">Error</span> <span class="n">installing</span> <span class="no">RedCloth</span><span class="p">:</span>
</span><span class='line'><span class="no">ERROR</span><span class="p">:</span> <span class="no">Failed</span> <span class="n">to</span> <span class="n">build</span> <span class="n">gem</span> <span class="n">native</span> <span class="n">extension</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>    <span class="sr">/usr/</span><span class="n">bin</span><span class="o">/</span><span class="n">ruby1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span> <span class="n">extconf</span><span class="o">.</span><span class="n">rb</span>
</span><span class='line'>    <span class="sr">/usr/</span><span class="n">lib</span><span class="o">/</span><span class="n">ruby</span><span class="o">/</span><span class="mi">1</span><span class="o">.</span><span class="mi">9</span><span class="o">.</span><span class="mi">3</span><span class="o">/</span><span class="n">rubygems</span><span class="o">/</span><span class="n">custom_require</span><span class="o">.</span><span class="n">rb</span><span class="p">:</span><span class="mi">36</span><span class="ss">:in</span> <span class="sb">`require&#39;: cannot load such file -- mkmf (LoadError)</span>
</span><span class='line'><span class="sb">from /usr/lib/ruby/1.9.3/rubygems/custom_require.rb:36:in `</span><span class="nb">require</span><span class="s1">&#39;</span>
</span><span class='line'><span class="s1">from extconf.rb:1:in `&lt;main&gt;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since gem install had never failed for me when I ran it, I decided to do a little more research.  What actually is RedCloth? Why do we need it?</p>

<!--more-->


<p><a href="http://redcloth.org/">RedCloth</a> is a module for using the Textile markup language in Ruby. Even the official website said the gem install should work. The issue was not actually RedCloth, but it turns out after checking the mkmf.log it was an issue with gcc-4.2 also not being found.</p>

<p><a href="http://gcc.gnu.org/">gcc</a> is the Gnu Compiler Collection.  It includes support for multiple programming languages, as well as libraries for these languages. Even after making sure that command line tools were installed with <a href="https://developer.apple.com/xcode/">Xcode</a>, it still didn&#8217;t find the gcc compiler. It appears that the newest version of Xcode has removed gcc in favor of <a href="http://clang.llvm.org/index.html">clang</a>.</p>

<p>Luckily, she actually had gcc on her machine, but it wasn&#8217;t installed. We only needed to run the last two lines of code. If you don&#8217;t, run all five lines.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">brew</span> <span class="n">update</span>
</span><span class='line'><span class="err">$</span> <span class="n">brew</span> <span class="n">tap</span> <span class="n">homebrew</span><span class="o">/</span><span class="n">homebrew</span><span class="o">-</span><span class="n">dupes</span>
</span><span class='line'><span class="err">$</span> <span class="n">brew</span> <span class="n">install</span> <span class="n">apple</span><span class="o">-</span><span class="n">gcc42</span>
</span><span class='line'><span class="err">$</span> <span class="n">sudo</span> <span class="n">ln</span> <span class="o">-</span><span class="n">s</span> <span class="sr">/usr/</span><span class="n">bin</span><span class="o">/</span><span class="n">gcc</span> <span class="sr">/usr/</span><span class="n">bin</span><span class="o">/</span><span class="n">gcc</span><span class="o">-</span><span class="mi">4</span><span class="o">.</span><span class="mi">2</span>
</span><span class='line'><span class="err">$</span> <span class="n">bundle</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Sources:</h4>

<p>https://github.com/imathis/octopress/issues/59 <br/>
http://jfire.io/blog/2012/03/02/xcode-4-dot-3-homebrew-and-ruby/ <br/>
http://stackoverflow.com/questions/12119138/failed-to-build-gem-native-extension-when-install-redcloth-4-2-9-install-linux  <br/>
http://jgarber.lighthouseapp.com/projects/13054/tickets/215-native-ext-compilation-failure</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 Easy Guides to Help You Get Started With GitHub]]></title>
    <link href="http://cjbrock.github.com/blog/2012/10/23/5-easy-guides-to-help-you-get-started-with-github/"/>
    <updated>2012-10-23T16:52:00-04:00</updated>
    <id>http://cjbrock.github.com/blog/2012/10/23/5-easy-guides-to-help-you-get-started-with-github</id>
    <content type="html"><![CDATA[<p>When you first start coding, storing things on your local hard drive is fine. But eventually the nightmares will start visiting you. What happens if your hard drive crashes? How do you collaborate with other people?</p>

<p>Enter <a href="http://git-scm.com/">Git</a> and <a href="https://github.com/">GitHub</a>.  Git is a version control system that helps you branch your code and bring it back together effectively, with a timeline that you can follow easily.  GitHub is a web-based hosting system for projects that use Git. To date, it&#8217;s the most popular system online. But learning to use Git isn&#8217;t easy.  These folks have put together some resources to help get you over that hump a little easier.</p>

<h2>1. <a href="http://try.github.com/">Try GitHub</a></h2>

<p><img class="left" src="http://cjbrock.github.com/images/Github/1-trygit.png" width="250" height="250" title="Try Git" alt="Try Git">
The amazing people at <a href="http://www.codeschool.com/">Code School</a> and GitHub have collaborated to make the great GitHub simulator <a href="http://try.github.com/">Try GitHub</a> to get you familiar with the Git syntax. It runs you through basic commands like git init, git status, git add, git commit, and git push. After you&#8217;ve run through this, the syntax doesn&#8217;t feel so foreign anymore.</p>

<!--more-->


<h2>2. <a href="https://help.github.com/">GitHub Help</a></h2>

<p><img class="left" src="http://cjbrock.github.com/images/Github/2-help-github-com.png" width="250" height="250" title="Help from Github" alt="Help from Github">
If you&#8217;ve run through Try GitHub and you still have questions, try the <a href="https://help.github.com/">GitHub Help</a> page. Chances are that if you have a question, many people before you have had the same one.  The search function on the Help page is incredibly robust, and the answers help to walk you through the steps needed to perform whatever it is that is confusing to you. They also have helpful categories of articles, such as <a href="https://help.github.com/categories/54/articles">Bootcamp</a>, <a href="https://help.github.com/categories/53/articles">Setup</a>, <a href="https://help.github.com/categories/19/articles">Using Git</a>, and <a href="https://help.github.com/categories/24/articles">Repositories</a> among others.</p>

<h2>3. <a href="http://rogerdudler.github.com/git-guide/">Git - The Simple Guide</a></h2>

<p><img class="left" src="http://cjbrock.github.com/images/Github/3-git-simple-guide.png" width="250" height="250" title="Git - The Simple Guide" alt="Git - The Simple Guide">
If you&#8217;re still struggling a little bit, try <a href="http://rogerdudler.github.com/git-guide/">Git - The Simple Guide</a>. Available in 12 different languages as well as English, The Simple Guide walks hand in hand with you through all the steps to set up a GitHub repository with helpful links to downloading git in multiple operating systems. Illustrated with colorful graphics and playful fonts, this really is the simplest guide to getting started with GitHub, but it gives you a good brief overview of the functionality that Git offers.</p>

<h2>4. <a href="http://railscasts.com/episodes/96-git-on-rails">Git on Rails</a></h2>

<p><img class="left" src="http://cjbrock.github.com/images/Github/4-railscasts.png" width="250" height="250" title="Git on Rails" alt="Git on Rails">
For those of you who prefer a more visual guide, <a href="http://railscasts.com/">Railscasts</a> offers a five minute screencast about getting started with Git. Railscasts are ubiquitous in the world of coding with over 350 episodes casted on almost every conceivable topic.  This short and sweet guide to getting started with Git is Rails specific, but the concepts apply through all languages.</p>

<h2>5. <a href="http://ndpsoftware.com/git-cheatsheet.html#loc=local_repo">GitHub Cheatsheet</a></h2>

<p><img class="left" src="http://cjbrock.github.com/images/Github/5-gitcheatsheet.png" width="250" height="250" title="Git Cheatsheet" alt="Git Cheatsheet">
The <a href="http://ndpsoftware.com/git-cheatsheet.html#loc=local_repo">GitHub Cheatsheet</a> is a beautifully designed interactive site that allows you to click on the specific area, and it gives you a mouse-over list of the commands available as well as a short synopsis of the function. It also uses good graphic design to illustrate which commands cover multiple areas.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby Koans and NYC on Rails]]></title>
    <link href="http://cjbrock.github.com/blog/2012/10/17/ruby-koans-and-nyc-on-rails/"/>
    <updated>2012-10-17T12:42:00-04:00</updated>
    <id>http://cjbrock.github.com/blog/2012/10/17/ruby-koans-and-nyc-on-rails</id>
    <content type="html"><![CDATA[<p>Last night I gave my first <a href="http://vimeo.com/51753999">Ruby presentation</a> to <a href="http://www.meetup.com/nyc-on-rails/">NYC on Rails</a>. I chose to present on the <a href="http://cjbrock.github.com/blog/2012/10/10/5-easy-steps-to-getting-started-with-ruby-koans/">Ruby Koans</a>: how to get started, and my favorite asserts.</p>

<p>Check out the video here:</p>

<div class="embed-video-container"><iframe src="http://player.vimeo.com/video/51753999 "></iframe></div>


<p>The slide deck is here:</p>

<script async class="speakerdeck-embed" data-id="507dea38d1e0a4000200cc41" data-ratio="1.2945638432364097" src="http://cjbrock.github.com//speakerdeck.com/assets/embed.js"></script>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing in Ruby with RSpec]]></title>
    <link href="http://cjbrock.github.com/blog/2012/10/16/testing-in-ruby-with-rspec/"/>
    <updated>2012-10-16T08:58:00-04:00</updated>
    <id>http://cjbrock.github.com/blog/2012/10/16/testing-in-ruby-with-rspec</id>
    <content type="html"><![CDATA[<p><em>tl:dr - Testing is awesome. Do it a lot.</em></p>

<p><img class="right" src="http://cjbrock.github.com/images/RSpec/rubytesting.png" title="Red Green Refactor" alt="Red Green Refactor">
Why do we test in Ruby? Ruby is a test-driven development language.  Testing inherently shows you where your application should go next. It allows you to specify the behavior that you think should happen before you write code to enact that behavior.  One of the most popular methods of testing in Ruby and Rails is <a href="http://rspec.info/">RSpec</a>.</p>

<p>RSpec is a behavior-driven development tool for Ruby programmers. Behavior-driven development is an approach to software development that combines test-driven development, domain driven design, and acceptance test-driven planning. RSpec includes a command line program, text descriptions of examples and groups, customized reporting, expectation language, and built-in mocking/stubbing framework.</p>

<p>As a beginner, I&#8217;m already thinking:</p>

<h1>Ok. What?</h1>

<!--more-->


<p><img class="left" src="http://cjbrock.github.com/images/RSpec/traffic.png" title="Red Green Refactor" alt="Red Green Refactor"></p>

<h2>Red-Green-Refactor</h2>

<p>If you&#8217;ve completed the <a href="http://cjbrock.github.com/blog/2012/10/10/5-easy-steps-to-getting-started-with-ruby-koans/">Ruby Koans</a>, you&#8217;ve already been exposed to testing syntax.  Testing in Ruby is done by a <a href="http://redgreenrefactor.eu/">Red-Green-Refactor</a> method. Basically, when you run your testing development tool, if the answer turns out red, your test fails. If it turns green, your test passes. And if it&#8217;s blue, you should check out your code for a way to refactor it and make it more efficient.</p>

<h3><a href="http://en.wikipedia.org/wiki/You_ain't_gonna_need_it">YAGNI</a></h3>

<p>When you&#8217;re writing an application, <a href="http://searchcio.techtarget.com/definition/feature-creep">feature creep</a> is bound to happen. If you can manage to stick to a test-driven method of development, you can keep feature creep to a minimum. It would be nice to immediately scale your website for a billion users, but YAGNI: You ain&#8217;t gonna need it.</p>

<h2>Dos and Don&#8217;ts of Testing</h2>

<p>Testing is actually very simple.  There are a few things to keep in mind, but overall if you trust your tests and allow them to guide your development you will not go wrong.</p>

<h3>Dos:</h3>

<ul>
<li><em>Write your tests first</em><br/>
The point of testing is to write the tests first, then write the code.  If you&#8217;re writing tests for code that you already think works, that&#8217;s not test driven development.</li>
<li><em>Use contexts</em><br/>
<a href="http://net.tutsplus.com/tutorials/ruby/ruby-for-newbies-testing-with-rspec/">Contexts</a> allow you to show the different behaviors of your application. They should simulate real-life situations.</li>
<li><em>Use shared example groups</em><br/>
<a href="http://blog.davidchelimsky.net/2010/11/07/specifying-mixins-with-shared-example-groups-in-rspec-2/">Shared example groups</a> allow you to define a method, and then call that method when testing.</li>
<li><em>Test your edge cases</em><br/>
It&#8217;s nice if your code works for the main bulk of your cases, but you must test your edge cases.</li>
</ul>


<h3>Don&#8217;ts:</h3>

<ul>
<li><em>Test the framework</em><br/>
The framework works. Rails was tested as it was developed. There&#8217;s no point in wasting your time testing a framework that works.</li>
<li><em>Test the implementation</em><br/>
Again, the implementation works. Don&#8217;t waste your time.</li>
<li><em>Get too clever</em><br/>
Yes, you must use contexts and edge cases, but don&#8217;t drive yourself crazy trying to test every single possible outcome. We all know where the logical stopping point is - acknowledge and accept it.</li>
</ul>


<p><em>(Note: This blog post is a brief summarization of the testing techniques laid out by user Duien on <a href="https://speakerdeck.com/u/duien/p/testing-ruby">Speakerdeck</a>. Additional research and extrapolation is my own.)</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[4 Coders Every Ruby Newbie Should Know]]></title>
    <link href="http://cjbrock.github.com/blog/2012/10/12/4-coders-every-ruby-newbie-should-know/"/>
    <updated>2012-10-12T14:00:00-04:00</updated>
    <id>http://cjbrock.github.com/blog/2012/10/12/4-coders-every-ruby-newbie-should-know</id>
    <content type="html"><![CDATA[<h2>Yukihiro &#8220;Matz&#8221; Matsumoto</h2>

<p><img class="right" src="http://cjbrock.github.com/images/coders/matzpic.jpg" title="Matz" alt="Yukihiro "></p>

<blockquote><p>I hope to see Ruby help every programmer in the world to be productive, and to enjoy programming, and to be happy. That is the primary purpose of Ruby language.</p></blockquote>


<p><a href="http://www.rubyist.net/~matz/">Matz</a> is a Japanese computer programmer and the creator of Ruby.  He released Ruby in December of 1995 as a productive language that was still fun to use, empahsizing the feeling of the language rather than striving for language perfection. Ruby is said to follow the principle of least astonishment, meaning that the language should behave in such a way as to minimize confusion for experienced users (at least if the user is Matz). Now working as the chief architect of <a href="http://www.heroku.com/">Heroku</a>, he is currently developing a new open-source lightweight Ruby project called <a href="https://github.com/mruby/mruby">mruby</a>.</p>

<p>The Ruby community lives by the mantra: &#8220;Matz is nice, so we are nice&#8221;.</p>

<!--more-->


<h2>_why the lucky stiff</h2>

<p><img class="right" src="http://cjbrock.github.com/images/coders/why.jpg" title="_Why" alt="_why the lucky stiff"></p>

<blockquote><p>When you don&#8217;t create things, you become defined by your tastes rather than ability. Your tastes only narrow & exclude people. So create.</p></blockquote>


<p>Although he committed <a href="http://www.urbandictionary.com/define.php?term=infocide">infocide</a> on August 19, 2009, _why is still one of the most influential Ruby programmers to date.  He is best known for <a href="http://mislav.uniqpath.com/poignant-guide/book/chapter-1.html">Why&#8217;s Poignant Guide to Ruby</a>, <a href="http://hackety.com/">Hackety Hack</a>, and the <a href="http://tryruby.org/">Try Ruby</a> interactive programming tutorial. He has also contributed several libraries and applications to the coder community. His love of programming and language speak to even new programmers, as illustrated by Annie Lowrey&#8217;s March 2012 Slate Magazine article <a href="http://www.slate.com/articles/technology/technology/2012/03/ruby_ruby_on_rails_and__why_the_disappearance_of_one_of_the_world_s_most_beloved_computer_programmers_.html">&#8220;Where&#8217;s _why?&#8221;</a>.</p>

<h2>David Heinemeier Hansson</h2>

<p><img class="right" src="http://cjbrock.github.com/images/coders/hansson.jpg" title="Hansson" alt="David Heinemeier Hansson"></p>

<blockquote><p>Flexibility is not free. It’s overrated. And if you trade that flexibility in for some constraints, you get a lot of complexity removed from the equation, you get a lot of productivity back from all the stuff you don’t have to do.</p></blockquote>


<p><a href="https://twitter.com/dhh">Hansson</a> is a Danish programmer who created <a href="http://rubyonrails.org/">Ruby on Rails</a>, a web framework that is optimized for programmer productivity.  It abstracts away a lot of code processes, leading some to criticize the <a href="http://www.michaelharrison.ws/weblog/?p=159">&#8220;magic&#8221; of rails</a>. However, Rails allows programmers a high level of productivity faster with a less painful learning curve than other languages. Hansson is also a <a href="http://david.heinemeierhansson.com/racing">professional race car driver</a>.</p>

<h2>Avi Flombaum</h2>

<p><img class="right" src="http://cjbrock.github.com/images/coders/avi.jpeg" title="Avi" alt="Avi Flombaum"></p>

<blockquote><p>There’s a joy to programming. That’s the reason why we’re here…to experience the act of falling in love with programming.</p></blockquote>


<p><a href="https://de.twitter.com/aviflombaum">Avi</a> is our fearless leader at the <a href="http://flatironschool.com">Flatiron School</a> in New York City. A programmer since the internet was born, Avi brings a love of code and a passion for teaching to the school. <a href="http://shitavisays.tumblr.com">Imminently quotable</a>, Avi also organizes one of the largest Rails meetups in the world, <a href="http://www.meetup.com/nyc-on-rails">NYC on Rails</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[5 Easy Steps to Getting Started with Ruby Koans]]></title>
    <link href="http://cjbrock.github.com/blog/2012/10/10/5-easy-steps-to-getting-started-with-ruby-koans/"/>
    <updated>2012-10-10T15:02:00-04:00</updated>
    <id>http://cjbrock.github.com/blog/2012/10/10/5-easy-steps-to-getting-started-with-ruby-koans</id>
    <content type="html"><![CDATA[<p><a href="http://rubykoans.com/">Ruby Koans</a> are a great learning tool published by Jim Weirich and Joe O&#8217;Brien.  They will expose you to both Ruby basics and testing conventions, but getting started can be a little intimidating. I&#8217;ve found these five tips to be really helpful.</p>

<h2>1. Download, don&#8217;t web-base.</h2>

<p>Although the web page does offer you the option to run through the Koans online, it&#8217;s an abridged version and only offers 30 modules. However, if you choose to web-base your koans, be sure to bookmark where you left off, so you can pick it back up again later.</p>

<h2>2. Read the Installing Ruby section (no, really).</h2>

<p>Even if you already have Ruby installed, walk through the Installing Ruby section of the webpage. it shows you how to get started with the Koans. To start the Koans, simply go to Terminal (or your choice of command line interface) and while in your Koans folder, type:
<img class="center" src="http://cjbrock.github.com/images/koans/path_to_enlightenment.png" title="Path to Enlightenment" alt="Path to Enlightenment">
The error message will point you directly to the file and line number. This will bring up your first test. You don&#8217;t really need to know about testing to be able to get through the Koans, you just need to understand that whenever you see a line like this: ___ you need to delete it and fill it in with something else.</p>

<!--more-->


<h2>3. Guess.</h2>

<p>If you know about the Koans, chances are that you have a basic Ruby knowledge base. Our first assert tells us exactly what to do, which makes guessing is pretty easy.
<img class="center" src="http://cjbrock.github.com/images/koans/first_assert.png" title="First Assert" alt="First Assert">
Once the assert is correct, go back to terminal and run ruby path_to_enlightement.rb again, and your test should pass.
<img class="center" src="http://cjbrock.github.com/images/koans/first_test_passed.png" title="First Test Passed" alt="First Test Passed"></p>

<h2>4. When in doubt, test in IRB.</h2>

<p>You can also test the code in IRB.  This will (almost) always give you the correct answer.
<img class="center" src="http://cjbrock.github.com/images/koans/about_nil.png" title="About Nil" alt="About Nil">
If you don&#8217;t know if nil is an object, run it in IRB.
<img class="center" src="http://cjbrock.github.com/images/koans/nil_object.png" title="Is Nil an Object" alt="Is Nil an Object"></p>

<h2>5. Google.</h2>

<p>If you&#8217;re really and truly stuck and can&#8217;t figure out the error message (usually about 15 minutes is a good rule of thumb when you&#8217;re having trouble) try Googling Ruby Koans and Github.  Many, many, many people have completed and committed the Koans, and a lot of them have committed them. When in doubt, check out their code and try to write your own based off their solutions. Be sure to check out a couple different solutions - all solutions are definitely not created equal.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://cjbrock.github.com/blog/2012/10/03/hello-world/"/>
    <updated>2012-10-03T15:29:00-04:00</updated>
    <id>http://cjbrock.github.com/blog/2012/10/03/hello-world</id>
    <content type="html"><![CDATA[<p>Flatiron school blog here I come!</p>
]]></content>
  </entry>
  
</feed>
